//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainClass ExampleModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.ExampleModel.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.ExampleModel.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e0278eca-cfcc-4b07-ac1a-8fe72b24985d")]
	public partial class ExampleModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExampleModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe0278eca, 0xcfcc, 0x4b07, 0xac, 0x1a, 0x8f, 0xe7, 0x2b, 0x24, 0x98, 0x5d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Processes opposite domain role accessor
		/// <summary>
		/// Gets a list of Processes.
		/// Description for DmitriNesteruk.AsyncDsl.ExampleModelHasProcesses.ExampleModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Process> Processes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Process>(this, global::DmitriNesteruk.AsyncDsl.ExampleModelHasProcesses.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		/// <summary>
		/// Gets a list of Comments.
		/// Description for DmitriNesteruk.AsyncDsl.ExampleModelHasComments.ExampleModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Comment>(this, global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments.ExampleModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DmitriNesteruk.AsyncDsl.Comment.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DmitriNesteruk.AsyncDsl.Process.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DmitriNesteruk.AsyncDsl.Comment sourceComment1 = sourceElement as global::DmitriNesteruk.AsyncDsl.Comment;
			if (sourceComment1 != null)
			{
				// Create link for path ExampleModelHasComments.Comments
				this.Comments.Add(sourceComment1);

				return;
			}
				
			global::DmitriNesteruk.AsyncDsl.Process sourceProcess2 = sourceElement as global::DmitriNesteruk.AsyncDsl.Process;
			if (sourceProcess2 != null)
			{
				// Create link for path ExampleModelHasProcesses.Processes
				this.Processes.Add(sourceProcess2);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DmitriNesteruk.AsyncDsl.Comment sourceComment1 = sourceElement as global::DmitriNesteruk.AsyncDsl.Comment;
			if (sourceComment1 != null)
			{
				// Delete link for path ExampleModelHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments.GetLinks((global::DmitriNesteruk.AsyncDsl.ExampleModel)this, sourceComment1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments.ExampleModelDomainRoleId, global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments.CommentDomainRoleId);
				}

				return;
			}
				
			global::DmitriNesteruk.AsyncDsl.Process sourceProcess2 = sourceElement as global::DmitriNesteruk.AsyncDsl.Process;
			if (sourceProcess2 != null)
			{
				// Delete link for path ExampleModelHasProcesses.Processes
				
				foreach (DslModeling::ElementLink link in global::DmitriNesteruk.AsyncDsl.ExampleModelHasProcesses.GetLinks((global::DmitriNesteruk.AsyncDsl.ExampleModel)this, sourceProcess2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DmitriNesteruk.AsyncDsl.ExampleModelHasProcesses.ExampleModelDomainRoleId, global::DmitriNesteruk.AsyncDsl.ExampleModelHasProcesses.ProcessDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainClass Process
	/// Description for DmitriNesteruk.AsyncDsl.Process
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.Process.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.Process.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("95948b91-1ed0-40c1-bf64-e4fa377a80db")]
	public partial class Process : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Process domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x95948b91, 0x1ed0, 0x40c1, 0xbf, 0x64, 0xe4, 0xfa, 0x37, 0x7a, 0x80, 0xdb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Process(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Process(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x281419aa, 0x149c, 0x4f32, 0xb2, 0x63, 0x03, 0xbd, 0x65, 0x87, 0xd3, 0x36);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for DmitriNesteruk.AsyncDsl.Process.Name
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.Process/Name.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.Process/Name.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("281419aa-149c-4f32-b263-03bd6587d336")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Process.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Process, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Process.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Process.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Process element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Process element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// Description for DmitriNesteruk.AsyncDsl.ExampleModelHasProcesses.Process
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DmitriNesteruk.AsyncDsl.ExampleModelHasProcesses.ProcessDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DmitriNesteruk.AsyncDsl.ExampleModelHasProcesses.ProcessDomainRoleId, value);
			}
		}
		#endregion
		#region FlowElements opposite domain role accessor
		/// <summary>
		/// Gets a list of FlowElements.
		/// Description for DmitriNesteruk.AsyncDsl.ProcessHasFlowElements.Process
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> FlowElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FlowElement>(this, global::DmitriNesteruk.AsyncDsl.ProcessHasFlowElements.ProcessDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DmitriNesteruk.AsyncDsl.FlowElement.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DmitriNesteruk.AsyncDsl.FlowElement sourceFlowElement1 = sourceElement as global::DmitriNesteruk.AsyncDsl.FlowElement;
			if (sourceFlowElement1 != null)
			{
				// Create link for path ProcessHasFlowElements.FlowElements
				this.FlowElements.Add(sourceFlowElement1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DmitriNesteruk.AsyncDsl.FlowElement sourceFlowElement1 = sourceElement as global::DmitriNesteruk.AsyncDsl.FlowElement;
			if (sourceFlowElement1 != null)
			{
				// Delete link for path ProcessHasFlowElements.FlowElements
				
				foreach (DslModeling::ElementLink link in global::DmitriNesteruk.AsyncDsl.ProcessHasFlowElements.GetLinks((global::DmitriNesteruk.AsyncDsl.Process)this, sourceFlowElement1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DmitriNesteruk.AsyncDsl.ProcessHasFlowElements.ProcessDomainRoleId, global::DmitriNesteruk.AsyncDsl.ProcessHasFlowElements.FlowElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainClass Comment
	/// Description for DmitriNesteruk.AsyncDsl.Comment
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.Comment.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.Comment.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("de51e196-736f-4610-b64f-09087876557a")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xde51e196, 0x736f, 0x4610, 0xb6, 0x4f, 0x09, 0x08, 0x78, 0x76, 0x55, 0x7a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x7724a5a8, 0xbbd2, 0x4868, 0x80, 0x7a, 0x29, 0xce, 0x49, 0x6e, 0xdb, 0x72);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for DmitriNesteruk.AsyncDsl.Comment.Text
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.Comment/Text.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.Comment/Text.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7724a5a8-bbd2-4868-807a-29ce496edb72")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Operations opposite domain role accessor
		/// <summary>
		/// Gets a list of Operations.
		/// Description for DmitriNesteruk.AsyncDsl.OperationReferencesComments.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Operation> Operations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Operation>(this, global::DmitriNesteruk.AsyncDsl.OperationReferencesComments.CommentDomainRoleId);
			}
		}
		#endregion
		#region ExampleModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ExampleModel.
		/// Description for DmitriNesteruk.AsyncDsl.ExampleModelHasComments.Comment
		/// </summary>
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments.CommentDomainRoleId) as ExampleModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainClass FlowElement
	/// Description for DmitriNesteruk.AsyncDsl.FlowElement
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.FlowElement.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.FlowElement.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5800d883-5c35-4e30-beda-460737baf9ea")]
	public abstract partial class FlowElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FlowElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5800d883, 0x5c35, 0x4e30, 0xbe, 0xda, 0x46, 0x07, 0x37, 0xba, 0xf9, 0xea);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FlowElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Process opposite domain role accessor
		/// <summary>
		/// Gets or sets Process.
		/// Description for DmitriNesteruk.AsyncDsl.ProcessHasFlowElements.FlowElement
		/// </summary>
		public virtual Process Process
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DmitriNesteruk.AsyncDsl.ProcessHasFlowElements.FlowElementDomainRoleId) as Process;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DmitriNesteruk.AsyncDsl.ProcessHasFlowElements.FlowElementDomainRoleId, value);
			}
		}
		#endregion
		#region TargetFlowElements opposite domain role accessor
		/// <summary>
		/// Gets a list of TargetFlowElements.
		/// Description for DmitriNesteruk.AsyncDsl.FlowElementBlocks.SourceFlowElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> TargetFlowElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FlowElement>(this, global::DmitriNesteruk.AsyncDsl.FlowElementBlocks.SourceFlowElementDomainRoleId);
			}
		}
		#endregion
		#region SourceFlowElements opposite domain role accessor
		/// <summary>
		/// Gets a list of SourceFlowElements.
		/// Description for DmitriNesteruk.AsyncDsl.FlowElementBlocks.TargetFlowElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> SourceFlowElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FlowElement>(this, global::DmitriNesteruk.AsyncDsl.FlowElementBlocks.TargetFlowElementDomainRoleId);
			}
		}
		#endregion
		#region TargetContinuationFlowElements opposite domain role accessor
		/// <summary>
		/// Gets a list of TargetContinuationFlowElements.
		/// Description for
		/// DmitriNesteruk.AsyncDsl.FlowElementContinuations.SourceFlowElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> TargetContinuationFlowElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FlowElement>(this, global::DmitriNesteruk.AsyncDsl.FlowElementContinuations.SourceFlowElementDomainRoleId);
			}
		}
		#endregion
		#region SourceContinuationFlowElements opposite domain role accessor
		/// <summary>
		/// Gets a list of SourceContinuationFlowElements.
		/// Description for
		/// DmitriNesteruk.AsyncDsl.FlowElementContinuations.TargetFlowElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> SourceContinuationFlowElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<FlowElement>(this, global::DmitriNesteruk.AsyncDsl.FlowElementContinuations.TargetFlowElementDomainRoleId);
			}
		}
		#endregion
	}
}
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainClass Operation
	/// Description for DmitriNesteruk.AsyncDsl.Operation
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.Operation.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.Operation.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("6c3e39b6-398b-43fe-b6e7-66fa26564b6d")]
	public partial class Operation : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Operation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6c3e39b6, 0x398b, 0x43fe, 0xb6, 0xe7, 0x66, 0xfa, 0x26, 0x56, 0x4b, 0x6d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Operation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Operation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xbbe04d49, 0x7901, 0x407c, 0x95, 0xaf, 0x5a, 0x14, 0x43, 0x7c, 0x57, 0x15);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for DmitriNesteruk.AsyncDsl.Operation.Name
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.Operation/Name.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.Operation/Name.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("bbe04d49-7901-407c-95af-5a14437c5715")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x93500539, 0x893a, 0x4929, 0x95, 0x2f, 0x8c, 0x4c, 0x56, 0x6d, 0x3e, 0x35);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Describe the operation - this will be emitted as a comment.
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.Operation/Description.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.Operation/Description.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("93500539-893a-4929-952f-8c4c566d3e35")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Comments opposite domain role accessor
		/// <summary>
		/// Gets a list of Comments.
		/// Description for DmitriNesteruk.AsyncDsl.OperationReferencesComments.Operation
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Comment>(this, global::DmitriNesteruk.AsyncDsl.OperationReferencesComments.OperationDomainRoleId);
			}
		}
		#endregion
	}
}
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainClass Start
	/// Description for DmitriNesteruk.AsyncDsl.Start
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.Start.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.Start.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b8c7f41d-2df8-432d-878b-b90d283b2a4c")]
	public partial class Start : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Start domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb8c7f41d, 0x2df8, 0x432d, 0x87, 0x8b, 0xb9, 0x0d, 0x28, 0x3b, 0x2a, 0x4c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Start(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Start(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainClass Finish
	/// Description for DmitriNesteruk.AsyncDsl.Finish
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.Finish.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.Finish.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("173b67c5-b4ae-4308-8f86-8a0f210c89e1")]
	public partial class Finish : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Finish domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x173b67c5, 0xb4ae, 0x4308, 0x8f, 0x86, 0x8a, 0x0f, 0x21, 0x0c, 0x89, 0xe1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Finish(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Finish(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
