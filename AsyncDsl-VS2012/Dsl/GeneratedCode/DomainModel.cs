//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainModel AsyncDslDomainModel
	/// Description for DmitriNesteruk.AsyncDsl.AsyncDsl
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.AsyncDslDomainModel.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.AsyncDslDomainModel.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("8d7244d7-79ee-4fa8-80e5-88c5fa0c4bed")]
	public partial class AsyncDslDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// AsyncDslDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x8d7244d7, 0x79ee, 0x4fa8, 0x80, 0xe5, 0x88, 0xc5, 0xfa, 0x0c, 0x4b, 0xed);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public AsyncDslDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(ExampleModel),
				typeof(Process),
				typeof(Comment),
				typeof(FlowElement),
				typeof(Operation),
				typeof(Start),
				typeof(Finish),
				typeof(ExampleModelHasProcesses),
				typeof(ProcessHasFlowElements),
				typeof(OperationReferencesComments),
				typeof(ExampleModelHasComments),
				typeof(FlowElementBlocks),
				typeof(FlowElementContinuations),
				typeof(AsyncDslDiagram),
				typeof(FinishToStartConnector),
				typeof(CommentConnector),
				typeof(StartToStartConnector),
				typeof(ThreadSwimLane),
				typeof(CommentShape),
				typeof(OperationShape),
				typeof(StartShape),
				typeof(FinishShape),
				typeof(global::DmitriNesteruk.AsyncDsl.FixUpDiagram),
				typeof(global::DmitriNesteruk.AsyncDsl.ConnectorRolePlayerChanged),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(Process), "Name", Process.NameDomainPropertyId, typeof(Process.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Comment), "Text", Comment.TextDomainPropertyId, typeof(Comment.TextPropertyHandler)),
				new DomainMemberInfo(typeof(Operation), "Name", Operation.NameDomainPropertyId, typeof(Operation.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Operation), "Description", Operation.DescriptionDomainPropertyId, typeof(Operation.DescriptionPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(ExampleModelHasProcesses), "ExampleModel", ExampleModelHasProcesses.ExampleModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExampleModelHasProcesses), "Process", ExampleModelHasProcesses.ProcessDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProcessHasFlowElements), "Process", ProcessHasFlowElements.ProcessDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProcessHasFlowElements), "FlowElement", ProcessHasFlowElements.FlowElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(OperationReferencesComments), "Operation", OperationReferencesComments.OperationDomainRoleId),
				new DomainRolePlayerInfo(typeof(OperationReferencesComments), "Comment", OperationReferencesComments.CommentDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExampleModelHasComments), "ExampleModel", ExampleModelHasComments.ExampleModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExampleModelHasComments), "Comment", ExampleModelHasComments.CommentDomainRoleId),
				new DomainRolePlayerInfo(typeof(FlowElementBlocks), "SourceFlowElement", FlowElementBlocks.SourceFlowElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(FlowElementBlocks), "TargetFlowElement", FlowElementBlocks.TargetFlowElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(FlowElementContinuations), "SourceFlowElement", FlowElementContinuations.SourceFlowElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(FlowElementContinuations), "TargetFlowElement", FlowElementContinuations.TargetFlowElementDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(16);
				createElementMap.Add(typeof(ExampleModel), 0);
				createElementMap.Add(typeof(Process), 1);
				createElementMap.Add(typeof(Comment), 2);
				createElementMap.Add(typeof(Operation), 3);
				createElementMap.Add(typeof(Start), 4);
				createElementMap.Add(typeof(Finish), 5);
				createElementMap.Add(typeof(AsyncDslDiagram), 6);
				createElementMap.Add(typeof(FinishToStartConnector), 7);
				createElementMap.Add(typeof(CommentConnector), 8);
				createElementMap.Add(typeof(StartToStartConnector), 9);
				createElementMap.Add(typeof(ThreadSwimLane), 10);
				createElementMap.Add(typeof(CommentShape), 11);
				createElementMap.Add(typeof(OperationShape), 12);
				createElementMap.Add(typeof(StartShape), 13);
				createElementMap.Add(typeof(FinishShape), 14);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new ExampleModel(partition, propertyAssignments);
				case 1: return new Process(partition, propertyAssignments);
				case 2: return new Comment(partition, propertyAssignments);
				case 3: return new Operation(partition, propertyAssignments);
				case 4: return new Start(partition, propertyAssignments);
				case 5: return new Finish(partition, propertyAssignments);
				case 6: return new AsyncDslDiagram(partition, propertyAssignments);
				case 7: return new FinishToStartConnector(partition, propertyAssignments);
				case 8: return new CommentConnector(partition, propertyAssignments);
				case 9: return new StartToStartConnector(partition, propertyAssignments);
				case 10: return new ThreadSwimLane(partition, propertyAssignments);
				case 11: return new CommentShape(partition, propertyAssignments);
				case 12: return new OperationShape(partition, propertyAssignments);
				case 13: return new StartShape(partition, propertyAssignments);
				case 14: return new FinishShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(6);
				createElementLinkMap.Add(typeof(ExampleModelHasProcesses), 0);
				createElementLinkMap.Add(typeof(ProcessHasFlowElements), 1);
				createElementLinkMap.Add(typeof(OperationReferencesComments), 2);
				createElementLinkMap.Add(typeof(ExampleModelHasComments), 3);
				createElementLinkMap.Add(typeof(FlowElementBlocks), 4);
				createElementLinkMap.Add(typeof(FlowElementContinuations), 5);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new ExampleModelHasProcesses(partition, roleAssignments, propertyAssignments);
				case 1: return new ProcessHasFlowElements(partition, roleAssignments, propertyAssignments);
				case 2: return new OperationReferencesComments(partition, roleAssignments, propertyAssignments);
				case 3: return new ExampleModelHasComments(partition, roleAssignments, propertyAssignments);
				case 4: return new FlowElementBlocks(partition, roleAssignments, propertyAssignments);
				case 5: return new FlowElementContinuations(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return AsyncDslDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (AsyncDslDomainModel.resourceManager == null)
				{
					AsyncDslDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(AsyncDslDomainModel).Assembly);
				}
				return AsyncDslDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return AsyncDslDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return AsyncDslDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (AsyncDslDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new AsyncDslCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					AsyncDslDomainModel.copyClosure = copyFilter;
				}
				return AsyncDslDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (AsyncDslDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new AsyncDslDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					AsyncDslDomainModel.removeClosure = removeFilter;
				}
				return AsyncDslDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::DmitriNesteruk.AsyncDsl.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::DmitriNesteruk.AsyncDsl.ConnectorRolePlayerChanged));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::DmitriNesteruk.AsyncDsl.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::DmitriNesteruk.AsyncDsl.ConnectorRolePlayerChanged));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class AsyncDslDeleteClosure : AsyncDslDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public AsyncDslDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class AsyncDslDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public AsyncDslDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::DmitriNesteruk.AsyncDsl.ExampleModelHasProcesses.ProcessDomainRoleId, true);
			DomainRoles.Add(global::DmitriNesteruk.AsyncDsl.ProcessHasFlowElements.FlowElementDomainRoleId, true);
			DomainRoles.Add(global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments.CommentDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class AsyncDslCopyClosure : AsyncDslCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public AsyncDslCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class AsyncDslCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public AsyncDslCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}

