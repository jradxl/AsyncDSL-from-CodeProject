//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainRelationship ExampleModelHasThreads
	/// Description for DmitriNesteruk.AsyncDsl.ExampleModelHasThreads
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.ExampleModelHasThreads.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.ExampleModelHasThreads.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e7ccee0d-6ebe-4e86-81db-8595e85de029")]
	public partial class ExampleModelHasThreads : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasThreads domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7ccee0d, 0x6ebe, 0x4e86, 0x81, 0xdb, 0x85, 0x95, 0xe8, 0x5d, 0xe0, 0x29);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasThreads link in the same Partition as the given ExampleModel
		/// </summary>
		/// <param name="source">ExampleModel to use as the source of the relationship.</param>
		/// <param name="target">Thread to use as the target of the relationship.</param>
		public ExampleModelHasThreads(ExampleModel source, Thread target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasThreads.ExampleModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasThreads.ThreadDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasThreads(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasThreads(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasThreads(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasThreads(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExampleModel domain role code
		
		/// <summary>
		/// ExampleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExampleModelDomainRoleId = new global::System.Guid(0x785685f4, 0x7d2b, 0x42b1, 0xaa, 0xbe, 0x8e, 0x6d, 0xf8, 0xee, 0xc0, 0x06);
		
		/// <summary>
		/// DomainRole ExampleModel
		/// Description for DmitriNesteruk.AsyncDsl.ExampleModelHasThreads.ExampleModel
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.ExampleModelHasThreads/ExampleModel.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.ExampleModelHasThreads/ExampleModel.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Threads", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.ExampleModelHasThreads/ExampleModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("785685f4-7d2b-42b1-aabe-8e6df8eec006")]
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExampleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExampleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExampleModel of a Thread
		/// <summary>
		/// Gets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExampleModel GetExampleModel(Thread element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ThreadDomainRoleId) as ExampleModel;
		}
		
		/// <summary>
		/// Sets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExampleModel(Thread element, ExampleModel newExampleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ThreadDomainRoleId, newExampleModel);
		}
		#endregion
		#region Thread domain role code
		
		/// <summary>
		/// Thread domain role Id.
		/// </summary>
		public static readonly global::System.Guid ThreadDomainRoleId = new global::System.Guid(0xd124c519, 0xdb11, 0x49bb, 0xbe, 0x22, 0x9a, 0xaa, 0x8a, 0x0c, 0x71, 0xc4);
		
		/// <summary>
		/// DomainRole Thread
		/// Description for DmitriNesteruk.AsyncDsl.ExampleModelHasThreads.Thread
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.ExampleModelHasThreads/Thread.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.ExampleModelHasThreads/Thread.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExampleModel", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.ExampleModelHasThreads/Thread.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d124c519-db11-49bb-be22-9aaa8a0c71c4")]
		public virtual Thread Thread
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Thread)DslModeling::DomainRoleInfo.GetRolePlayer(this, ThreadDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ThreadDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Threads of a ExampleModel
		/// <summary>
		/// Gets a list of Threads.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Thread> GetThreads(ExampleModel element)
		{
			return new DslModeling::LinkedElementCollection<Thread>(element, ExampleModelDomainRoleId);
		}
		#endregion
		#region ExampleModel link accessor
		/// <summary>
		/// Get the list of ExampleModelHasThreads links to a ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads> GetLinksToThreads ( global::DmitriNesteruk.AsyncDsl.ExampleModel exampleModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads>(exampleModelInstance, global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads.ExampleModelDomainRoleId);
		}
		#endregion
		#region Thread link accessor
		/// <summary>
		/// Get the ExampleModelHasThreads link to a Thread.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads GetLinkToExampleModel (global::DmitriNesteruk.AsyncDsl.Thread threadInstance)
		{
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads>(threadInstance, global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads.ThreadDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Thread not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasThreads instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasThreads links between a given ExampleModel and a Thread.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads> GetLinks( global::DmitriNesteruk.AsyncDsl.ExampleModel source, global::DmitriNesteruk.AsyncDsl.Thread target )
		{
			global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads> outLinks = new global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads>();
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads>(source, global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads.ExampleModelDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads link in links )
			{
				if ( target.Equals(link.Thread) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasThreads link between a given ExampleModeland a Thread.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads GetLink( global::DmitriNesteruk.AsyncDsl.ExampleModel source, global::DmitriNesteruk.AsyncDsl.Thread target )
		{
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads>(source, global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads.ExampleModelDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.ExampleModelHasThreads link in links )
			{
				if ( target.Equals(link.Thread) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainRelationship ThreadHasFlowElements
	/// Description for DmitriNesteruk.AsyncDsl.ThreadHasFlowElements
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.ThreadHasFlowElements.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.ThreadHasFlowElements.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("464c5fc9-56e2-427f-b010-9e6c6690f742")]
	public partial class ThreadHasFlowElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ThreadHasFlowElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x464c5fc9, 0x56e2, 0x427f, 0xb0, 0x10, 0x9e, 0x6c, 0x66, 0x90, 0xf7, 0x42);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ThreadHasFlowElements link in the same Partition as the given Thread
		/// </summary>
		/// <param name="source">Thread to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public ThreadHasFlowElements(Thread source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ThreadHasFlowElements.ThreadDomainRoleId, source), new DslModeling::RoleAssignment(ThreadHasFlowElements.FlowElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ThreadHasFlowElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ThreadHasFlowElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ThreadHasFlowElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ThreadHasFlowElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Thread domain role code
		
		/// <summary>
		/// Thread domain role Id.
		/// </summary>
		public static readonly global::System.Guid ThreadDomainRoleId = new global::System.Guid(0x2001baf8, 0x9d86, 0x4f65, 0xbd, 0x8c, 0x3a, 0xb5, 0x89, 0x42, 0x49, 0xfc);
		
		/// <summary>
		/// DomainRole Thread
		/// Description for DmitriNesteruk.AsyncDsl.ThreadHasFlowElements.Thread
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.ThreadHasFlowElements/Thread.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.ThreadHasFlowElements/Thread.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FlowElements", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.ThreadHasFlowElements/Thread.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2001baf8-9d86-4f65-bd8c-3ab5894249fc")]
		public virtual Thread Thread
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Thread)DslModeling::DomainRoleInfo.GetRolePlayer(this, ThreadDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ThreadDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Thread of a FlowElement
		/// <summary>
		/// Gets Thread.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Thread GetThread(FlowElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FlowElementDomainRoleId) as Thread;
		}
		
		/// <summary>
		/// Sets Thread.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetThread(FlowElement element, Thread newThread)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FlowElementDomainRoleId, newThread);
		}
		#endregion
		#region FlowElement domain role code
		
		/// <summary>
		/// FlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowElementDomainRoleId = new global::System.Guid(0xc0aa7afc, 0x09f3, 0x4008, 0xbc, 0x2e, 0x00, 0xf8, 0xa4, 0x3e, 0xe3, 0x0e);
		
		/// <summary>
		/// DomainRole FlowElement
		/// Description for DmitriNesteruk.AsyncDsl.ThreadHasFlowElements.FlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.ThreadHasFlowElements/FlowElement.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.ThreadHasFlowElements/FlowElement.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Thread", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.ThreadHasFlowElements/FlowElement.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c0aa7afc-09f3-4008-bc2e-00f8a43ee30e")]
		public virtual FlowElement FlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowElements of a Thread
		/// <summary>
		/// Gets a list of FlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowElements(Thread element)
		{
			return new DslModeling::LinkedElementCollection<FlowElement>(element, ThreadDomainRoleId);
		}
		#endregion
		#region Thread link accessor
		/// <summary>
		/// Get the list of ThreadHasFlowElements links to a Thread.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements> GetLinksToFlowElements ( global::DmitriNesteruk.AsyncDsl.Thread threadInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements>(threadInstance, global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements.ThreadDomainRoleId);
		}
		#endregion
		#region FlowElement link accessor
		/// <summary>
		/// Get the ThreadHasFlowElements link to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements GetLinkToThread (global::DmitriNesteruk.AsyncDsl.FlowElement flowElementInstance)
		{
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements>(flowElementInstance, global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements.FlowElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FlowElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ThreadHasFlowElements instance accessors
		
		/// <summary>
		/// Get any ThreadHasFlowElements links between a given Thread and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements> GetLinks( global::DmitriNesteruk.AsyncDsl.Thread source, global::DmitriNesteruk.AsyncDsl.FlowElement target )
		{
			global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements> outLinks = new global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements>();
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements>(source, global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements.ThreadDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ThreadHasFlowElements link between a given Threadand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements GetLink( global::DmitriNesteruk.AsyncDsl.Thread source, global::DmitriNesteruk.AsyncDsl.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements>(source, global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements.ThreadDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.ThreadHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainRelationship OperationReferencesComments
	/// Description for DmitriNesteruk.AsyncDsl.OperationReferencesComments
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.OperationReferencesComments.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.OperationReferencesComments.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5b3ab30b-6849-4013-95a7-db81e5bcc3ec")]
	public partial class OperationReferencesComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OperationReferencesComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b3ab30b, 0x6849, 0x4013, 0x95, 0xa7, 0xdb, 0x81, 0xe5, 0xbc, 0xc3, 0xec);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OperationReferencesComments link in the same Partition as the given Operation
		/// </summary>
		/// <param name="source">Operation to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public OperationReferencesComments(Operation source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OperationReferencesComments.OperationDomainRoleId, source), new DslModeling::RoleAssignment(OperationReferencesComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OperationReferencesComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OperationReferencesComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OperationReferencesComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OperationReferencesComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0x14a08ff8, 0x7f52, 0x4188, 0xaa, 0x49, 0x9d, 0x1c, 0xa1, 0x44, 0x65, 0xfc);
		
		/// <summary>
		/// DomainRole Operation
		/// Description for DmitriNesteruk.AsyncDsl.OperationReferencesComments.Operation
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.OperationReferencesComments/Operation.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.OperationReferencesComments/Operation.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.OperationReferencesComments/Operation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("14a08ff8-7f52-4188-aa49-9d1ca14465fc")]
		public virtual Operation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Operation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operations of a Comment
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Operation> GetOperations(Comment element)
		{
			return new DslModeling::LinkedElementCollection<Operation>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x1476e99e, 0x1513, 0x46fb, 0xad, 0xf5, 0xe8, 0x83, 0xa7, 0x55, 0x74, 0x54);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for DmitriNesteruk.AsyncDsl.OperationReferencesComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.OperationReferencesComments/Comment.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.OperationReferencesComments/Comment.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Operations", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.OperationReferencesComments/Comment.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1476e99e-1513-46fb-adf5-e883a7557454")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a Operation
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(Operation element)
		{
			return new DslModeling::LinkedElementCollection<Comment>(element, OperationDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the list of OperationReferencesComments links to a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.OperationReferencesComments> GetLinksToComments ( global::DmitriNesteruk.AsyncDsl.Operation operationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.OperationReferencesComments>(operationInstance, global::DmitriNesteruk.AsyncDsl.OperationReferencesComments.OperationDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of OperationReferencesComments links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.OperationReferencesComments> GetLinksToOperations ( global::DmitriNesteruk.AsyncDsl.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.OperationReferencesComments>(commentInstance, global::DmitriNesteruk.AsyncDsl.OperationReferencesComments.CommentDomainRoleId);
		}
		#endregion
		#region OperationReferencesComments instance accessors
		
		/// <summary>
		/// Get any OperationReferencesComments links between a given Operation and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.OperationReferencesComments> GetLinks( global::DmitriNesteruk.AsyncDsl.Operation source, global::DmitriNesteruk.AsyncDsl.Comment target )
		{
			global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.OperationReferencesComments> outLinks = new global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.OperationReferencesComments>();
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.OperationReferencesComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.OperationReferencesComments>(source, global::DmitriNesteruk.AsyncDsl.OperationReferencesComments.OperationDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.OperationReferencesComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OperationReferencesComments link between a given Operationand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DmitriNesteruk.AsyncDsl.OperationReferencesComments GetLink( global::DmitriNesteruk.AsyncDsl.Operation source, global::DmitriNesteruk.AsyncDsl.Comment target )
		{
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.OperationReferencesComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.OperationReferencesComments>(source, global::DmitriNesteruk.AsyncDsl.OperationReferencesComments.OperationDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.OperationReferencesComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainRelationship ExampleModelHasComments
	/// Description for DmitriNesteruk.AsyncDsl.ExampleModelHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.ExampleModelHasComments.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.ExampleModelHasComments.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("66d57efd-dedb-4dc9-abdc-4726193b29aa")]
	public partial class ExampleModelHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x66d57efd, 0xdedb, 0x4dc9, 0xab, 0xdc, 0x47, 0x26, 0x19, 0x3b, 0x29, 0xaa);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasComments link in the same Partition as the given ExampleModel
		/// </summary>
		/// <param name="source">ExampleModel to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ExampleModelHasComments(ExampleModel source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasComments.ExampleModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExampleModel domain role code
		
		/// <summary>
		/// ExampleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExampleModelDomainRoleId = new global::System.Guid(0x9254e74c, 0x1d8f, 0x4a40, 0x8f, 0x40, 0x21, 0x53, 0x44, 0x66, 0xba, 0x20);
		
		/// <summary>
		/// DomainRole ExampleModel
		/// Description for DmitriNesteruk.AsyncDsl.ExampleModelHasComments.ExampleModel
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.ExampleModelHasComments/ExampleModel.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.ExampleModelHasComments/ExampleModel.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.ExampleModelHasComments/ExampleModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9254e74c-1d8f-4a40-8f40-21534466ba20")]
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExampleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExampleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExampleModel of a Comment
		/// <summary>
		/// Gets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExampleModel GetExampleModel(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ExampleModel;
		}
		
		/// <summary>
		/// Sets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExampleModel(Comment element, ExampleModel newExampleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newExampleModel);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xd1e6dbc4, 0x72f9, 0x4b11, 0xbc, 0x26, 0x00, 0xf4, 0x53, 0x57, 0x16, 0x18);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for DmitriNesteruk.AsyncDsl.ExampleModelHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.ExampleModelHasComments/Comment.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.ExampleModelHasComments/Comment.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExampleModel", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.ExampleModelHasComments/Comment.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d1e6dbc4-72f9-4b11-bc26-00f453571618")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ExampleModel
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ExampleModel element)
		{
			return new DslModeling::LinkedElementCollection<Comment>(element, ExampleModelDomainRoleId);
		}
		#endregion
		#region ExampleModel link accessor
		/// <summary>
		/// Get the list of ExampleModelHasComments links to a ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments> GetLinksToComments ( global::DmitriNesteruk.AsyncDsl.ExampleModel exampleModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments>(exampleModelInstance, global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments.ExampleModelDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ExampleModelHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments GetLinkToExampleModel (global::DmitriNesteruk.AsyncDsl.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments>(commentInstance, global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasComments instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasComments links between a given ExampleModel and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments> GetLinks( global::DmitriNesteruk.AsyncDsl.ExampleModel source, global::DmitriNesteruk.AsyncDsl.Comment target )
		{
			global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments> outLinks = new global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments>();
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments>(source, global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments.ExampleModelDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasComments link between a given ExampleModeland a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments GetLink( global::DmitriNesteruk.AsyncDsl.ExampleModel source, global::DmitriNesteruk.AsyncDsl.Comment target )
		{
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments>(source, global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments.ExampleModelDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.ExampleModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainRelationship FlowElementBlocks
	/// Description for DmitriNesteruk.AsyncDsl.FlowElementBlocks
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.FlowElementBlocks.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.FlowElementBlocks.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("46117c11-4f87-4e96-a2cb-9d4b83433583")]
	public partial class FlowElementBlocks : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FlowElementBlocks domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x46117c11, 0x4f87, 0x4e96, 0xa2, 0xcb, 0x9d, 0x4b, 0x83, 0x43, 0x35, 0x83);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FlowElementBlocks link in the same Partition as the given FlowElement
		/// </summary>
		/// <param name="source">FlowElement to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public FlowElementBlocks(FlowElement source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FlowElementBlocks.SourceFlowElementDomainRoleId, source), new DslModeling::RoleAssignment(FlowElementBlocks.TargetFlowElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowElementBlocks(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowElementBlocks(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowElementBlocks(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowElementBlocks(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceFlowElement domain role code
		
		/// <summary>
		/// SourceFlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceFlowElementDomainRoleId = new global::System.Guid(0x5d5382dd, 0x1956, 0x44a9, 0x8a, 0xa8, 0x3f, 0x9d, 0x39, 0x04, 0x7f, 0xde);
		
		/// <summary>
		/// DomainRole SourceFlowElement
		/// Description for DmitriNesteruk.AsyncDsl.FlowElementBlocks.SourceFlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.FlowElementBlocks/SourceFlowElement.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.FlowElementBlocks/SourceFlowElement.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetFlowElements", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.FlowElementBlocks/SourceFlowElement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5d5382dd-1956-44a9-8aa8-3f9d39047fde")]
		public virtual FlowElement SourceFlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceFlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceFlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceFlowElements of a FlowElement
		/// <summary>
		/// Gets a list of SourceFlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetSourceFlowElements(FlowElement element)
		{
			return new DslModeling::LinkedElementCollection<FlowElement>(element, TargetFlowElementDomainRoleId);
		}
		#endregion
		#region TargetFlowElement domain role code
		
		/// <summary>
		/// TargetFlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetFlowElementDomainRoleId = new global::System.Guid(0xe17cbb66, 0xc84c, 0x45cf, 0xa5, 0xba, 0xc2, 0x3d, 0x2c, 0xaa, 0x49, 0xc1);
		
		/// <summary>
		/// DomainRole TargetFlowElement
		/// Description for DmitriNesteruk.AsyncDsl.FlowElementBlocks.TargetFlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.FlowElementBlocks/TargetFlowElement.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.FlowElementBlocks/TargetFlowElement.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceFlowElements", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.FlowElementBlocks/TargetFlowElement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e17cbb66-c84c-45cf-a5ba-c23d2caa49c1")]
		public virtual FlowElement TargetFlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetFlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetFlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetFlowElements of a FlowElement
		/// <summary>
		/// Gets a list of TargetFlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetTargetFlowElements(FlowElement element)
		{
			return new DslModeling::LinkedElementCollection<FlowElement>(element, SourceFlowElementDomainRoleId);
		}
		#endregion
		#region SourceFlowElement link accessor
		/// <summary>
		/// Get the list of FlowElementBlocks links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.FlowElementBlocks> GetLinksToTargetFlowElements ( global::DmitriNesteruk.AsyncDsl.FlowElement sourceFlowElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.FlowElementBlocks>(sourceFlowElementInstance, global::DmitriNesteruk.AsyncDsl.FlowElementBlocks.SourceFlowElementDomainRoleId);
		}
		#endregion
		#region TargetFlowElement link accessor
		/// <summary>
		/// Get the list of FlowElementBlocks links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.FlowElementBlocks> GetLinksToSourceFlowElements ( global::DmitriNesteruk.AsyncDsl.FlowElement targetFlowElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.FlowElementBlocks>(targetFlowElementInstance, global::DmitriNesteruk.AsyncDsl.FlowElementBlocks.TargetFlowElementDomainRoleId);
		}
		#endregion
		#region FlowElementBlocks instance accessors
		
		/// <summary>
		/// Get any FlowElementBlocks links between a given FlowElement and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.FlowElementBlocks> GetLinks( global::DmitriNesteruk.AsyncDsl.FlowElement source, global::DmitriNesteruk.AsyncDsl.FlowElement target )
		{
			global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.FlowElementBlocks> outLinks = new global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.FlowElementBlocks>();
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.FlowElementBlocks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.FlowElementBlocks>(source, global::DmitriNesteruk.AsyncDsl.FlowElementBlocks.SourceFlowElementDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.FlowElementBlocks link in links )
			{
				if ( target.Equals(link.TargetFlowElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FlowElementBlocks link between a given FlowElementand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DmitriNesteruk.AsyncDsl.FlowElementBlocks GetLink( global::DmitriNesteruk.AsyncDsl.FlowElement source, global::DmitriNesteruk.AsyncDsl.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.FlowElementBlocks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.FlowElementBlocks>(source, global::DmitriNesteruk.AsyncDsl.FlowElementBlocks.SourceFlowElementDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.FlowElementBlocks link in links )
			{
				if ( target.Equals(link.TargetFlowElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace DmitriNesteruk.AsyncDsl
{
	/// <summary>
	/// DomainRelationship FlowElementContinuations
	/// Description for DmitriNesteruk.AsyncDsl.FlowElementContinuations
	/// </summary>
	[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.FlowElementContinuations.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.FlowElementContinuations.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7b7bfcc1-d71c-4088-a72c-4b336ec3eecb")]
	public partial class FlowElementContinuations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FlowElementContinuations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7b7bfcc1, 0xd71c, 0x4088, 0xa7, 0x2c, 0x4b, 0x33, 0x6e, 0xc3, 0xee, 0xcb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FlowElementContinuations link in the same Partition as the given FlowElement
		/// </summary>
		/// <param name="source">FlowElement to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public FlowElementContinuations(FlowElement source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FlowElementContinuations.SourceFlowElementDomainRoleId, source), new DslModeling::RoleAssignment(FlowElementContinuations.TargetFlowElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowElementContinuations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowElementContinuations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowElementContinuations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowElementContinuations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceFlowElement domain role code
		
		/// <summary>
		/// SourceFlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceFlowElementDomainRoleId = new global::System.Guid(0x1d2a0827, 0xc5d7, 0x45f5, 0x94, 0x91, 0x4d, 0x7d, 0xe9, 0x15, 0xf9, 0xb8);
		
		/// <summary>
		/// DomainRole SourceFlowElement
		/// Description for
		/// DmitriNesteruk.AsyncDsl.FlowElementContinuations.SourceFlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.FlowElementContinuations/SourceFlowElement.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.FlowElementContinuations/SourceFlowElement.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetContinuationFlowElements", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.FlowElementContinuations/SourceFlowElement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1d2a0827-c5d7-45f5-9491-4d7de915f9b8")]
		public virtual FlowElement SourceFlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceFlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceFlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceContinuationFlowElements of a FlowElement
		/// <summary>
		/// Gets a list of SourceContinuationFlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetSourceContinuationFlowElements(FlowElement element)
		{
			return new DslModeling::LinkedElementCollection<FlowElement>(element, TargetFlowElementDomainRoleId);
		}
		#endregion
		#region TargetFlowElement domain role code
		
		/// <summary>
		/// TargetFlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetFlowElementDomainRoleId = new global::System.Guid(0xa29b7688, 0x6083, 0x43bb, 0xad, 0x8e, 0xdf, 0x8d, 0x1f, 0x28, 0xea, 0x75);
		
		/// <summary>
		/// DomainRole TargetFlowElement
		/// Description for
		/// DmitriNesteruk.AsyncDsl.FlowElementContinuations.TargetFlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("DmitriNesteruk.AsyncDsl.FlowElementContinuations/TargetFlowElement.DisplayName", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DmitriNesteruk.AsyncDsl.FlowElementContinuations/TargetFlowElement.Description", typeof(global::DmitriNesteruk.AsyncDsl.AsyncDslDomainModel), "DmitriNesteruk.AsyncDsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceContinuationFlowElements", PropertyDisplayNameKey="DmitriNesteruk.AsyncDsl.FlowElementContinuations/TargetFlowElement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a29b7688-6083-43bb-ad8e-df8d1f28ea75")]
		public virtual FlowElement TargetFlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetFlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetFlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetContinuationFlowElements of a FlowElement
		/// <summary>
		/// Gets a list of TargetContinuationFlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetTargetContinuationFlowElements(FlowElement element)
		{
			return new DslModeling::LinkedElementCollection<FlowElement>(element, SourceFlowElementDomainRoleId);
		}
		#endregion
		#region SourceFlowElement link accessor
		/// <summary>
		/// Get the list of FlowElementContinuations links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.FlowElementContinuations> GetLinksToTargetContinuationFlowElements ( global::DmitriNesteruk.AsyncDsl.FlowElement sourceFlowElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.FlowElementContinuations>(sourceFlowElementInstance, global::DmitriNesteruk.AsyncDsl.FlowElementContinuations.SourceFlowElementDomainRoleId);
		}
		#endregion
		#region TargetFlowElement link accessor
		/// <summary>
		/// Get the list of FlowElementContinuations links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.FlowElementContinuations> GetLinksToSourceContinuationFlowElements ( global::DmitriNesteruk.AsyncDsl.FlowElement targetFlowElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.FlowElementContinuations>(targetFlowElementInstance, global::DmitriNesteruk.AsyncDsl.FlowElementContinuations.TargetFlowElementDomainRoleId);
		}
		#endregion
		#region FlowElementContinuations instance accessors
		
		/// <summary>
		/// Get any FlowElementContinuations links between a given FlowElement and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DmitriNesteruk.AsyncDsl.FlowElementContinuations> GetLinks( global::DmitriNesteruk.AsyncDsl.FlowElement source, global::DmitriNesteruk.AsyncDsl.FlowElement target )
		{
			global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.FlowElementContinuations> outLinks = new global::System.Collections.Generic.List<global::DmitriNesteruk.AsyncDsl.FlowElementContinuations>();
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.FlowElementContinuations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.FlowElementContinuations>(source, global::DmitriNesteruk.AsyncDsl.FlowElementContinuations.SourceFlowElementDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.FlowElementContinuations link in links )
			{
				if ( target.Equals(link.TargetFlowElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FlowElementContinuations link between a given FlowElementand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DmitriNesteruk.AsyncDsl.FlowElementContinuations GetLink( global::DmitriNesteruk.AsyncDsl.FlowElement source, global::DmitriNesteruk.AsyncDsl.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::DmitriNesteruk.AsyncDsl.FlowElementContinuations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DmitriNesteruk.AsyncDsl.FlowElementContinuations>(source, global::DmitriNesteruk.AsyncDsl.FlowElementContinuations.SourceFlowElementDomainRoleId);
			foreach ( global::DmitriNesteruk.AsyncDsl.FlowElementContinuations link in links )
			{
				if ( target.Equals(link.TargetFlowElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
